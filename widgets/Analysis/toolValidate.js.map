{"version":3,"sources":["../../../widgets/Analysis/toolValidate.js"],"names":["define","lang","array","layerUtil","mo","isValid","layerObjects","toolConfig","privilegeUtil","dijitID","indexOf","mergeAvailable","extractAvailable","geocodeLocationsFromTable","requiredParam","paramAvailable","analysisLayer","tableInfos","getTableInfos","isArray","length","some","layerA","layerB","geometryType","user","getUser","isPortal","forEach","layerObject","isGeoRSS","declaredClass","isCSV","isFeatureLayer","isWFSLayer","isFeatCol","url","_addExtractCapability","isAdmin","itemInfo","itemControl","orgId","owner","username","capabilities","firstGroup","geomTypes","result","findMatchedFeatureLayers","secondGroup","matchedLayerId","hitch","push","id"],"mappings":"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","file":"toolValidate.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////\r\n// Copyright Â© Esri. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n///////////////////////////////////////////////////////////////////////////\r\n\r\ndefine([\r\n  'dojo/_base/lang',\r\n  'dojo/_base/array',\r\n  './layerUtil'\r\n], function(lang, array, layerUtil) {\r\n  var mo = {};\r\n\r\n  mo.isValid = function(layerObjects, toolConfig, privilegeUtil){\r\n    var isValid = false;\r\n    if(toolConfig.dijitID.indexOf('MergeLayers') !== -1){\r\n      isValid = this.mergeAvailable(layerObjects);\r\n    }else if(toolConfig.dijitID.indexOf('ExtractData') !== -1){\r\n      isValid = this.extractAvailable(layerObjects, privilegeUtil);\r\n    }else if(toolConfig.dijitID.indexOf('GeocodeLocationsFromTable') !== -1){\r\n      isValid = this.geocodeLocationsFromTable();\r\n    }else{\r\n      var requiredParam = null;\r\n      if('requiredParam' in toolConfig){\r\n        requiredParam = toolConfig.requiredParam;\r\n      }\r\n      isValid = this.paramAvailable(layerObjects, toolConfig.analysisLayer, requiredParam);\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  mo.geocodeLocationsFromTable = function() {\r\n    var tableInfos = layerUtil.getTableInfos();\r\n    return lang.isArray(tableInfos) && tableInfos.length > 0;\r\n  };\r\n\r\n  mo.mergeAvailable = function(layerObjects){\r\n    //check if there are two layers with the same geometry type\r\n    return array.some(layerObjects, function(layerA){\r\n      return array.some(layerObjects, function(layerB){\r\n        return (layerB !== layerA && layerB.geometryType === layerA.geometryType);\r\n      });\r\n    });\r\n  };\r\n\r\n  mo.extractAvailable = function(layerObjects, privilegeUtil){\r\n    //check if there is a layer having Extract capability\r\n    //capabilities is a string, like \"Create, Delete, Query, Extract\"\r\n    var user = privilegeUtil.getUser();\r\n    var isPortal = privilegeUtil.isPortal();\r\n\r\n    array.forEach(layerObjects, function(layerObject){\r\n      var isGeoRSS = (layerObject.declaredClass === 'esri.layers.GeoRSSLayer');\r\n      var isCSV = (layerObject.declaredClass === 'esri.layers.CSVLayer');\r\n      var isFeatureLayer = layerObject.declaredClass === 'esri.layers.FeatureLayer';\r\n      var isWFSLayer = layerObject.declaredClass === 'esri.layers.WFSLayer';\r\n      var isFeatCol = isFeatureLayer && !layerObject.url;\r\n\r\n      if(isFeatCol || isGeoRSS || isCSV || isWFSLayer){\r\n        this._addExtractCapability(layerObject);\r\n      }else if(isFeatureLayer) {\r\n        if(privilegeUtil.isAdmin() && ((isPortal && layerObject.itemInfo &&\r\n          layerObject.itemInfo.itemControl && layerObject.itemInfo.itemControl === 'admin') ||\r\n          (!isPortal && layerObject.url && layerObject.url.indexOf('/' + user.orgId + '/') > -1))) {\r\n          this._addExtractCapability(layerObject);\r\n        }else if(user && layerObject.itemInfo && layerObject.itemInfo.owner &&\r\n          layerObject.itemInfo.owner === user.username &&\r\n          ((!isPortal && layerObject.url && layerObject.url.indexOf('/' + user.orgId + '/') > -1) ||\r\n          isPortal)) {\r\n          this._addExtractCapability(layerObject);\r\n        }\r\n      }\r\n    }, this);\r\n\r\n    return array.some(layerObjects, function(layerObject) {\r\n      return layerObject.capabilities && layerObject.capabilities.indexOf('Extract') >= 0;\r\n    });\r\n  };\r\n\r\n  mo._addExtractCapability = function(layerObject){\r\n    if(layerObject.capabilities) {\r\n      if(layerObject.capabilities.indexOf('Extract') === -1) {\r\n        layerObject.capabilities = layerObject.capabilities + ',Extract';\r\n      }\r\n    }else {\r\n      layerObject.capabilities = 'Extract';\r\n    }\r\n    return true;\r\n  };\r\n\r\n  mo.paramAvailable = function(layerObjects, analysisLayer, requiredParam){\r\n    var firstGroup, geomTypes, result = false;\r\n    //check analysis layer parameter\r\n    geomTypes = analysisLayer.geomTypes;\r\n    firstGroup = this.findMatchedFeatureLayers(layerObjects, geomTypes);\r\n    if(firstGroup.length > 0) {\r\n      if(requiredParam){\r\n        //check required layer parameters\r\n        geomTypes = requiredParam.geomTypes;\r\n        var secondGroup = this.findMatchedFeatureLayers(layerObjects, geomTypes);\r\n\r\n        if(secondGroup.length > 0) {\r\n          // check whether firstGroup and secondGroup can pick up two different layers\r\n          if(firstGroup.length !== secondGroup.length) {\r\n            result = true;\r\n          } else if(firstGroup.length > 1) {\r\n            // length of two groups are equal\r\n            result = true;\r\n          } else if(firstGroup[0] !== secondGroup[0]) {\r\n            // length of two groups equal to 1\r\n            result = true;\r\n          }\r\n        }\r\n      } else {\r\n        result = true;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  mo.findMatchedFeatureLayers = function(layerObjects, geomTypes){\r\n    var matchedLayerId = [];\r\n    array.forEach(layerObjects, lang.hitch(this, function(layerObject){\r\n      if(layerObject){\r\n        if(geomTypes.length === 1){\r\n          if(geomTypes[0] === '*' || geomTypes[0] === layerObject.geometryType){\r\n            matchedLayerId.push(layerObject.id);\r\n          }\r\n        }else if(geomTypes.indexOf(layerObject.geometryType) > -1){\r\n          matchedLayerId.push(layerObject.id);\r\n        }\r\n      }\r\n    }));\r\n    return matchedLayerId;\r\n  };\r\n  //----------------------end--------------------------//\r\n  return mo;\r\n});\r\n"]}