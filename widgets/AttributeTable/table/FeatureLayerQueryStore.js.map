{"version":3,"sources":["../../../../widgets/AttributeTable/table/FeatureLayerQueryStore.js"],"names":["define","declare","lang","array","Query","QueryTask","FeatureLayerQueryResult","FeatureLayerQueryStore","queryUrl","idProperty","data","_entityData","constructor","options","safeMixin","layer","objectIds","where","orderByFields","totalCount","batchCount","objectIdField","spatialFilter","url","queryTask","get","id","getIdentity","object","query","queryObj","start","count","_export_count","filterIds","Object","prototype","toString","call","length","slice","num","geometry","spatialRelationship","SPATIAL_REL_INTERSECTS","sort","map","s","attribute","descending","returnGeometry","geometryType","outFields","results","invalidIds","invalidWhereStr","execute","queryFeatures","total","then","hitch","result","i","objectIdFieldName","fields","type","name","lookup","features","attributes","objectId","feature","mixin","clone","push","console","log"],"mappings":"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","file":"FeatureLayerQueryStore.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////\r\n// Copyright Â© Esri. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n///////////////////////////////////////////////////////////////////////////\r\ndefine([\r\n  \"dojo/_base/declare\",\r\n  \"dojo/_base/lang\",\r\n  \"dojo/_base/array\",\r\n  \"esri/tasks/query\",\r\n  \"esri/tasks/QueryTask\",\r\n  \"./FeatureLayerQueryResult\"\r\n], function(\r\n  declare, lang, array, Query, QueryTask, FeatureLayerQueryResult\r\n) {\r\n\r\n  //cache store for dgrid, vs memory store\r\n  var FeatureLayerQueryStore = declare(null, {\r\n\r\n    queryUrl: \"\",\r\n    idProperty: \"id\",//objectIdField\r\n    //data is objectId indexed\r\n    data: null, // [attributes1,...attributes25,undefined.....,attributes51,attributes52,..]\r\n    _entityData: null, // [attributes1,attributes2,...attributes25,attributes51,attributes52....]\r\n\r\n    constructor: function(options) {\r\n      declare.safeMixin(this, options);\r\n      this.data = [];\r\n      this._entityData = [];\r\n\r\n      this.layer = options.layer;\r\n\r\n      // null for server side paging\r\n      this.objectIds = options.objectIds;\r\n\r\n      // required for server side paging\r\n      this.where = options.where;\r\n      this.orderByFields = options.orderByFields;\r\n\r\n      this.totalCount = options.totalCount;\r\n      this.batchCount = options.batchCount || 25;\r\n      this.idProperty = this.layer.objectIdField;\r\n      this.spatialFilter = options.spatialFilter;\r\n\r\n      if (this.layer && this.layer.url) {\r\n        this.queryTask = new QueryTask(this.layer.url);\r\n      }\r\n    }, // End constructor\r\n\r\n    //get attributes by objectId\r\n    get: function(id) {\r\n      return this.data[id];\r\n    },\r\n\r\n    //get objectId value\r\n    getIdentity: function(object) {\r\n      return object[this.idProperty];\r\n    },\r\n\r\n    //query is user defiend\r\n    //query maybe function or {},_FeatureTable.showSelectedRecords()\r\n    //\r\n    //options is passed by dgrid,like\r\n    //{\"sort\":[{\"attribute\":\"FID\",\"descending\":false}],\"start\":1603,\"count\":35}\r\n    //options.start means index of new start row, not objectId\r\n    query: function(query, options) {\r\n      var queryObj = new Query();\r\n      var start = (options && options.start) || 0;\r\n      // _export_count for export query\r\n      var count = /*options.count ||*/  options._export_count || this.batchCount;\r\n      var filterIds = null;\r\n\r\n      if (typeof query === 'function') {\r\n        //if query is function, means we call _FeatureTable.showSelectedRecords(),\r\n        //so this method is called\r\n        filterIds = query(this._entityData);\r\n      } else if (Object.prototype.toString.call(query) === '[object Array]') {\r\n        filterIds = query;\r\n      }\r\n\r\n      if (this.objectIds) {\r\n        //if service support pagination, this.objectIds is null\r\n        //if service doesn't support objectId, this.objectIds is null\r\n        //if service support object but not support pagination, this.objectIds is [objectId]\r\n        filterIds = filterIds ? filterIds : this.objectIds;\r\n        if (filterIds.length >= (start + this.batchCount)) {\r\n          queryObj.objectIds = filterIds.slice(start, start + count);\r\n        } else {\r\n          queryObj.objectIds = filterIds.slice(start);\r\n        }\r\n      } else {\r\n        // server supports paging\r\n        if (filterIds && filterIds.length > 0) {\r\n          if (filterIds.length >= (start + this.batchCount)) {\r\n            queryObj.objectIds = filterIds.slice(start, start + count);\r\n          } else {\r\n            queryObj.objectIds = filterIds.slice(start);\r\n          }\r\n        } else {\r\n          queryObj.start = start;\r\n          queryObj.num = count; // doesn't matter if there are not <num> features left\r\n          queryObj.where = this.where;\r\n          queryObj.geometry = this.spatialFilter;\r\n          queryObj.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\r\n        }\r\n\r\n        var sort = options.sort;\r\n        if (sort && sort.length > 0) {\r\n          var orderByFields = array.map(sort, function(s) {\r\n            return s.attribute + \" \" + (s.descending ? \"DESC\" : \"ASC\");\r\n          });\r\n          queryObj.orderByFields = orderByFields; //this.orderByFields;\r\n        }\r\n      }\r\n\r\n      // queryObj.returnGeometry = false;\r\n      queryObj.returnGeometry = this.layer.geometryType === 'esriGeometryPoint';\r\n      queryObj.outFields = [\"*\"];\r\n      var totalCount = this.totalCount;\r\n\r\n      var results = null;\r\n      // never request data if objectIds and where clause is invalid\r\n      var invalidIds = !(queryObj.objectIds && queryObj.objectIds.length > 0);\r\n      var invalidWhereStr = !queryObj.where;\r\n      if (invalidIds && invalidWhereStr) {\r\n        return new FeatureLayerQueryResult([]);\r\n      }\r\n\r\n      if (this.queryTask) {\r\n        results = this.queryTask.execute(queryObj);\r\n      } else {\r\n        results = this.layer.queryFeatures(queryObj);\r\n      }\r\n\r\n      results.total = results.then(lang.hitch(this, function(result) {\r\n        var i = 0;\r\n        // var objectIdFieldName = result.objectIdFieldName;\r\n        var objectIdFieldName = this.layer.objectIdField;\r\n\r\n        if (this.objectIds) {\r\n          // sort the resulting features to the order of the objectIds sent in\r\n          if (!objectIdFieldName) {\r\n            for (i = 0; i < result.fields.length; i++) {\r\n              if (result.fields[i].type === \"esriFieldTypeOID\") {\r\n                objectIdFieldName = result.fields[i].name;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          var lookup = {};\r\n          for (i = 0; i < result.features.length; i++) {\r\n            lookup[result.features[i].attributes[objectIdFieldName]] = result.features[i];\r\n          }\r\n\r\n          result.features = array.map(queryObj.objectIds, function(objectId) {\r\n            return lookup[objectId];\r\n          });\r\n        }\r\n\r\n        // modify the JSON response to an array of objects containing the info for grid rows\r\n        for (i = 0; i < result.features.length; i++) {\r\n          if (result.features[i]) {\r\n            var feature = result.features[i];\r\n\r\n            //result.features will be attributes array\r\n            result.features[i] = lang.mixin(lang.clone(feature.attributes), {\r\n              geometry: feature.geometry\r\n            });\r\n            this.data[result.features[i][objectIdFieldName]] = result.features[i];//attributes\r\n            this._entityData.push(result.features[i]);\r\n          }\r\n        }\r\n\r\n        result = result.features;\r\n\r\n        return totalCount;\r\n\r\n      }), function() {\r\n        console.log(\"FeatureLayerQueryStore queryFeatures failed.\");\r\n        return 0;\r\n      });\r\n\r\n      return new FeatureLayerQueryResult(results);\r\n    }\r\n\r\n  });\r\n  return FeatureLayerQueryStore;\r\n});"]}